name: Build with Nuitka, Upload to PyPI and Releases

on:
  release:
    types: [created]

permissions:
  contents: write
  actions: write

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            icon: --windows-icon-from-ico=src/aniworld/icon.webp
          - os: ubuntu-latest
            icon: --linux-icon=src/aniworld/icon.webp
          - os: macos-latest
            icon: --macos-app-icon=src/aniworld/icon.webp --macos-signed-app-name=com.phoenixthrush.aniworld

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install toml imageio nuitka
          pip install .

      - name: Extract version from pyproject.toml
        shell: bash
        id: extract_version
        run: |
          VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "Version extracted: ${VERSION}"

      - name: Build distribution
        if: matrix.os == 'ubuntu-latest'
        run: |
          pip install build twine
          python -m build

      - name: Upload to PyPI
        if: matrix.os == 'ubuntu-latest'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          twine upload dist/* -u __token__ -p ${{ secrets.PYPI_TOKEN }} || true

      - name: Upload dist files to GitHub Release
        if: matrix.os == 'ubuntu-latest'
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          token: ${{ github.token }}

      - name: Build with Nuitka
        shell: bash
        run: |
          JSON_PATH=$(python -c "import fake_useragent, os; print(os.path.join(os.path.dirname(fake_useragent.__file__), 'data', 'browsers.jsonl'))")
          V=$VERSION
          Y=$(python -c "import datetime; print(datetime.datetime.now().year)")
          if [[ ${{ matrix.os }} == 'windows-latest' ]]; then
            EXT=".exe"
          else
            EXT=""
          fi
          python -m nuitka --onefile --assume-yes-for-downloads --include-package=aniworld \
          --include-data-file=$JSON_PATH=fake_useragent/data/browsers.jsonl \
          --output-filename=aniworld-${V}-${{ matrix.os }}${EXT} \
          --company-name="Phoenixthrush UwU" \
          --product-name="AniWorld Downloader" \
          --file-version=$V \
          --product-version=$V \
          --file-description="AniWorld Downloader is a command-line tool built to download and stream anime content from aniworld.to" \
          --copyright="Copyright (c) 2024-$Y phoenixthrush, Tmaster055" \
          ${{ matrix.icon }} \
          src/aniworld/entry.py

      - uses: actions/upload-artifact@v4
        if: matrix.os == 'windows-latest'
        with:
          name: aniworld-${{ matrix.os }}
          path: aniworld-${{ env.VERSION }}-${{ matrix.os }}.exe

      - uses: actions/upload-artifact@v4
        with:
          name: aniworld-${{ matrix.os }}
          path: aniworld-${{ env.VERSION }}-${{ matrix.os }}

      - name: Upload Nuitka build to GitHub Release
        if: matrix.os == 'windows-latest'
        uses: softprops/action-gh-release@v2
        with:
          files: aniworld-${{ env.VERSION }}-${{ matrix.os }}.exe

      - name: Upload Nuitka build to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: aniworld-${{ env.VERSION }}-${{ matrix.os }}
